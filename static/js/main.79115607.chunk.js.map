{"version":3,"sources":["Images/arc-reacter.jpg","Images/auth.jpg","Images/code.jpg","Images/wifi.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","reactor","authentication","code","wifi","images","set_images","className","id","src","alt","width","height","onClick","all_images","choped_image","splice","length","moveBack","moveForward","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,+OC4C5BC,MArCf,WAAgB,IAAD,EACeC,mBAAS,CACnCC,IAAQC,IAAeC,IAAKC,MAFjB,mBACNC,EADM,KACCC,EADD,KAgBb,OACE,6BACE,yBAAKC,UAAY,kBACf,yBAAKA,UAAY,iBACf,yBAAKC,GAAK,UAAUD,UAAY,aAC9B,yBAAME,IAAOJ,EAAO,GAAIK,IAAM,SAASC,MAAQ,OAAOC,OAAS,WAGnE,yBAAKL,UAAY,oBACf,yBAAKC,GAAK,UAAUD,UAAY,WAC9B,yBAAKE,IAAOJ,EAAO,GAAIK,IAAM,UAAUC,MAAQ,OAAOC,OAAS,OAAOC,QAAW,kBAhB1E,WACf,IAAIC,EAAU,YAAOT,GACjBU,EAAeD,EAAWE,OAAOX,EAAOY,OAAO,EAAE,GACrDH,EAAU,CAAIC,EAAa,IAAjB,mBAAuBD,IACjCR,EAAWQ,GAYmFI,OAExF,yBAAKV,GAAK,UAAUD,UAAY,WAC9B,yBAAKE,IAAOJ,EAAO,GAAIK,IAAM,UAAUC,MAAQ,OAAOC,OAAS,OAAOC,QAAW,kBAzBvE,WAClB,IAAIC,EAAU,YAAOT,GACjBU,EAAeD,EAAWE,OAAO,EAAE,GACvCF,EAAU,sBAAOA,GAAP,CAAkBC,EAAa,KACzCT,EAAWQ,GAqBmFK,WCxB9EC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79115607.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arc-reacter.0f5d6e7e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/auth.4243cc10.jpg\";","module.exports = __webpack_public_path__ + \"static/media/code.811e09e7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wifi.4252a5b6.jpg\";","import React,{useState} from 'react';\nimport reactor from './Images/arc-reacter.jpg';\nimport authentication from './Images/auth.jpg';\nimport code from './Images/code.jpg';\nimport wifi from './Images/wifi.jpg';\nimport './App.css';\n\nfunction App() {\n  const [images,set_images] = useState([\n    reactor,authentication,code,wifi\n  ])\n  const moveForward = () =>{\n    let all_images = [...images]\n    let choped_image = all_images.splice(0,1)\n    all_images = [...all_images,choped_image[0]]\n    set_images(all_images)\n  }\n  const moveBack = () =>{\n    let all_images = [...images]\n    let choped_image = all_images.splice(images.length-1,1)\n    all_images = [choped_image[0],...all_images]\n    set_images(all_images)\n  }\n  return (\n    <div>\n      <div className = 'main_container'>\n        <div className = 'big_container'>\n          <div id = 'biggest' className = 'big_image'>\n            <img  src = {images[0]} alt = 'image_' width = '100%' height = '100%'/>\n          </div>\n        </div>\n        <div className = 'smalls_container'>\n          <div id = 'small_1' className = 'small_1'>\n            <img src = {images[1]} alt = 'image_1' width = '100%' height = '100%' onClick = {()=> moveBack()}/>\n          </div>\n          <div id = 'small_2' className = 'small_2'>\n            <img src = {images[2]} alt = 'image_2' width = '100%' height = '100%' onClick = {()=> moveForward()}/>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}